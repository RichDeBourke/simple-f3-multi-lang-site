{"version":3,"sources":["slider.scss","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAAA;;;;;;AAaA,gBACC,MAAA,KACA,SAAA,OACA,SAAA,SACA,cAAA,KAJD,yBAME,MAAA,KACA,OAAA,KACA,QAAA,MACA,OAAA,IAAA,MAAA,QACA,eAAA,KACA,cAAA,SACA,iBAAA,QACA,WAAA,WAbF,4BAiBG,QAAA,GAjBH,kCAmBI,QAAA,EAnBJ,4BAuBG,QAAA,GAvBH,kCAyBI,QAAA,EAKJ,SACC,WAAA,KACA,SAAA,SACA,MAAA,KACA,OAAA,KACA,KAAA,EACA,IAAA,EACA,QAAA,EACA,WAAA,QAAA,KAAA,YARD,aAUE,QAAA,MACA,MAAA,KACA,OAAA,KAZF,cAeE,SAAA,SACA,IAAA,GACA,KAAA,IACA,UAAA,OAIF,cAEQ,UAAA,OCPJ,yBDYA,cAED,UAAA,MCdC,yBDoBA,cAED,UAAA,SCtBC,yBD4BA,cAED,UAAA,QAKH,eACC,QAAA,EAED,cACC,MAAA,QAED,mBACC,WAAA,OACA,SAAA,SACA,OAAA,MACA,KAAA,EACG,MAAA,EALJ,sBAOQ,aAAA,EACA,YAAA,EAGR,iBACC,WAAA,KACA,QAAA,aACA,MAAA,KACA,OAAA,KACA,OAAA,IAAA,MAAA,KACA,cAAA,KACA,OAAA,EAAA,KACA,OAAA,QACA,WAAA,WAAA,IAAA,YATD,uBAWE,WAAA,gBAGF,UACC,WAAA,eAGD,mBACI,iBAAA,YACA,OAAA,KACA,QAAA,EACA,QAAA,EACH,SAAA,SACA,IAAA,IACA,OAAA,KACA,MAAA,KACA,WAAA,QAAA,KAAA,YACG,OAAA,QAVJ,yBAYQ,QAAA,EAIR,MACC,KAAA,MAED,MACC,MAAA,MAED,MACC,KAAA,KACA,OAAA,KACA,QAAA,IACA,aAAA,GACA,kBAAA,GAED,KACC,WAAA,aAAA,IAAA,YADD,WAGE,aAAA,EAIF,4BACC,iBAAA,8LAED,4BACC,iBAAA,+LAED,wBAEE,iBAAA,QAFF,6BAMQ,iBAAA","file":"../sass/slider.css","sourcesContent":["/*!\r\n * Bootstrap v4.5.0 (https://getbootstrap.com/)\r\n * Copyright 2011-2020 The Bootstrap Authors\r\n * Copyright 2011-2020 Twitter, Inc.\r\n * Copyright 2019-2020 Rich DeBourke / SBF Consulting\r\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n */\r\n\r\n@import \"site_variables\";\r\n@import \"../../node_modules/bootstrap/scss/functions\";\r\n@import \"../../node_modules/bootstrap/scss/variables\";\r\n@import \"../../node_modules/bootstrap/scss/mixins\";\r\n\r\n#overlay-slider {\r\n\twidth: 100%;\r\n\toverflow: hidden;\r\n\tposition: relative;\r\n\tmargin-bottom: 1rem;\r\n\timg.base {\r\n\t\twidth: 100%;\r\n\t\theight: auto;\r\n\t\tdisplay: block;\r\n\t\tborder: 1px solid $gray-600;\r\n\t\tpadding-bottom: 48px;\r\n\t\tborder-radius: 0.1875rem;\r\n\t\tbackground-color: $gray-100;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\t&:hover {\r\n\t\t#prev {\r\n\t\t\topacity: 0.4;\r\n\t\t\t&:hover {\r\n\t\t\t\topacity: 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t#next {\r\n\t\t\topacity: 0.4;\r\n\t\t\t&:hover {\r\n\t\t\t\topacity: 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n.overlay {\r\n\tlist-style: none;\r\n\tposition: absolute;\r\n\twidth: 100%;\r\n\theight: auto;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\topacity: 0;\r\n\ttransition: opacity 0.25s ease-in-out;\r\n\timg {\r\n\t\tdisplay: block;\r\n\t\twidth: 100%;\r\n\t\theight: auto;\r\n\t}\r\n\tspan {\r\n\t\tposition: absolute;\r\n\t\ttop: 5%;\r\n\t\tleft: 50%;\r\n\t\tfont-size: 1.5rem;\r\n\t}\r\n}\r\n\r\n.overlay {\r\n    span {\r\n        font-size: 0.75rem;\r\n    }\r\n}\r\n\r\n@include media-breakpoint-up(sm) {\r\n    .overlay {\r\n\t\tspan {\r\n\t\t\tfont-size: 1rem;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@include media-breakpoint-up(md) {\r\n    .overlay {\r\n\t\tspan {\r\n\t\t\tfont-size: 1.25rem;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@include media-breakpoint-up(lg) {\r\n    .overlay {\r\n\t\tspan {\r\n\t\t\tfont-size: 1.5rem;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.overlay.front {\r\n\topacity: 1;\r\n}\r\n.overlay-text {\r\n\tcolor: $dark;\r\n}\r\n.overlay-indicator {\r\n\ttext-align: center;\r\n\tposition: absolute;\r\n\tbottom: 0.5rem;\r\n\tleft: 0;\r\n    right: 0;\r\n    & ul {\r\n        padding-left: 0;\r\n        margin-left: 0;\r\n    }\r\n}\r\n.overlay-current {\r\n\tlist-style: none;\r\n\tdisplay: inline-block;\r\n\twidth: 1rem;\r\n\theight: 1rem;\r\n\tborder: 1px solid $black;\r\n\tborder-radius: 1rem;\r\n\tmargin: 0 1rem;\r\n\tcursor: pointer;\r\n\ttransition: background 0.3s ease-in-out;\r\n\t&:hover {\r\n\t\tbackground: rgba(0,0,0,0.75);\r\n\t}\r\n}\r\n.selected {\r\n\tbackground: rgba(0,0,0,0.3);\r\n}\r\n\r\n.overlay-prev-next {\r\n    background-color: transparent;\r\n    border: none;\r\n    padding: 0;\r\n    opacity: 0;\r\n\tposition: absolute;\r\n\ttop: 45%;\r\n\theight: 50px;\r\n\twidth: 25px;\r\n\ttransition: opacity 0.25s ease-in-out;\r\n    cursor: pointer;\r\n    &:focus {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n#prev {\r\n\tleft: 0.5rem;\r\n}\r\n#next {\r\n\tright: 0.5rem;\r\n}\r\n.line {\r\n\tfill: none;\r\n\tstroke: $black;\r\n\topacity: 0.75;\r\n\tstroke-width: 10;\r\n\tstroke-miterlimit: 10;\r\n}\r\nrect {\r\n\ttransition: fill-opacity 0.5s ease-in-out;\r\n\t&:hover {\r\n\t\tfill-opacity: 1;\r\n\t}\r\n}\r\n\r\n.carousel-control-prev-icon {\r\n\tbackground-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='black' viewBox='0 0 8 8'%3E%3Cpath d='M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z'/%3E%3C/svg%3E\");\r\n}\r\n.carousel-control-next-icon {\r\n\tbackground-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23000' viewBox='0 0 8 8'%3E%3Cpath d='M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z'/%3E%3C/svg%3E\");\r\n}\r\n.carousel-indicators {\r\n\tli {\r\n\t\tbackground-color: $gray-500;\r\n    }\r\n    \r\n    .active {\r\n        background-color: $black;\r\n    }\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}